import os
import getpass
import asyncio
from utils.assistant_manager import OpenAIAssistantManager


async def create_assistants(assistant_manager, assistants_info):
    assistants_data = {}
    for assistant_name, assistant_info in assistants_info.items():
        assistant_id = await assistant_manager.create_assistant(
            assistant_name,
            assistant_info["instructions"],
            assistant_info["tools"],
            assistant_info["model"]
        )
        assistants_data[assistant_name] = assistant_id
        print(f"Assistant created successfully: {assistant_name} with ID {assistant_id}")
    return assistants_data

def write_to_env_file(api_key, assistants_data):
    file_path = '.env'
    with open(file_path, 'w') as file:
        file.write(f"OPENAI_API_KEY={api_key}\n")
        for assistant_name, assistant_id in assistants_data.items():
            file.write(f"{assistant_name.upper().replace(' ', '_')}_ID={assistant_id}\n")
    print(f"Content saved to .env file successfully!")

def delete_existing_env_file():
    if os.path.exists('.env'):
        os.remove('.env')
        print("Existing .env file deleted.")

def request_api_key():
    while True:
        content = getpass.getpass("Enter the API key value (must start with 'sk-'): ")
        if content.startswith("sk-"):
            return content
        else:
            print("Error: API key must start with 'sk-'. Please try again.")

async def clear_existing_assistants(assistant_manager):
    response = await assistant_manager.list_assistants()
    try:
        for assistant in response.data:
            print (f"Deleting asssistant: {assistant.name}")
            await assistant_manager.delete_assistant(assistant.id)
    except Exception as e:
        print (f"Error {e}")

async def main():
    print("Checking if .env file exists")
    delete_existing_env_file()
    api_key = request_api_key()

    # Prepare data to write to .env file
    assistants_info = {
        "BaselineSecurityExpert": {
            "instructions": "An assistant specialized in providing customized security recommendations for a wide range of AWS products. It should analyze the configuration and usage of each product, identify potential vulnerabilities, and recommend specific security controls, aligned with information security best practices, relevant compliance standards, and security frameworks. The assistant should offer guidance for continuous monitoring and incident response, relying on services like CloudWatch and AWS Security Hub, and stay updated on the latest security threats and vulnerabilities.",
            "tools": [{"type": "code_interpreter"}],
            "model": "gpt-3.5-turbo-16k"
        },
        "SecurityGuardianAI": {
            "instructions": "A specialized assistant for conducting detailed comparisons and critical analyses of security controls for AWS products, juxtaposing an organization's internal security policies and practices against security recommendations generated by other AI assistants. SecurityGuardianAI is designed to:\n\nAnalyze Documents and Recommendations:\nEvaluate both the organization's internal security documents and security recommendations generated by other assistants, focusing on AWS products. This includes proposed or implemented policies, procedures, and security controls.\n\nIdentify Discrepancies and Improvement Opportunities:\nDetect any internal security controls not addressed in external recommendations, as well as identify potential conflicts or redundancies between internal practices and assistant suggestions.\n\nRecommend Specific Actions:\nBased on the comparison, recommend adjustments to internal policies or the implementation of additional security controls, aligning internal practices with industry best practices, relevant compliance standards, and security frameworks.\n\nGuide Continuous Monitoring and Incident Response:\nProvide guidance for the continuous monitoring of AWS product security, using services like AWS CloudWatch and AWS Security Hub, and suggest practices for effective incident response.\n\nStay Updated on Security Threats:\nRemain informed about the latest security threats and vulnerabilities, ensuring that analyses and recommendations consider current and emerging cybersecurity trends.\n\nSecurityGuardianAI is designed to be a proactive tool in identifying gaps in an organization's security posture, promoting an evidence-based approach to strengthening security practices. It aims to facilitate informed decision-making on security risk management, leveraging in-depth analyses to ensure the integrity, confidentiality, and availability of AWS resources.",
            "tools": [
                {"type": "code_interpreter"},
                {"type": "retrieval"}
            ],
            "model": "gpt-4-0125-preview"
        }
    }

    # Create an instance of OpenAIAssistantManager
    assistant_manager = OpenAIAssistantManager(api_key)

    # Call clear_existing_assistants method
    await clear_existing_assistants(assistant_manager)

    # Call create_assistants method
    assistants_data = await create_assistants(assistant_manager, assistants_info)

    # Write all assistants to .env file
    write_to_env_file(api_key, assistants_data)

if __name__ == "__main__":
    asyncio.run(main())
