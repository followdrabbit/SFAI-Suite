# OpenAI Assistant Manager Documentation

## Overview

The OpenAI Assistant Manager is a Python script designed to manage OpenAI assistants. It allows for creating, updating, deleting assistants, managing their files, and listing all available assistants.

## Setup

To run the script, ensure you have Python installed along with the openai package. You also need to have a .env file with your OpenAI API key:

```
OPENAI_API_KEY=your_api_key_here
```

## Class: OpenAIAssistantManager

### Initialization

```python
manager = OpenAIAssistantManager(api_key)
```

Initializes the manager with an asynchronous OpenAI client using the provided api_key.


## Methods

### list_assistants

```python
async def list_assistants(self)
```
Fetches the list of assistants asynchronously, removing any duplicates found by name.


### create_assistant

```python
async def create_assistant(self, name, instructions, tools, model)
```

Asynchronously creates a new assistant with the given name, instructions, tools, and model.


### update_assistant

```python
async def update_assistant(self, assistant_id, name=None, description=None, instructions=None, tools=None)
```
Updates specified fields (name, description, instructions, tools) of an assistant.


### delete_assistant

```python
async def delete_assistant(self, assistant_id)
```
Deletes an assistant using its ID.


### create_assistant_file

```python
async def create_assistant_file(self, assistant_id, file_id)
```
Creates a file association with an assistant.


### delete_assistant_file

```python
async def delete_assistant_file(self, assistant_id, file_id)
```
Deletes a file association from an assistant.


### list_assistant_files

```python
async def list_assistant_files(self, assistant_id)
```

Lists all files associated with an assistant.


## Usage Example

### Creating an Assistant

```python
await manager.create_assistant(
    name="Cloud Security Expert",
    instructions="An assistant specialized in cloud information security.",
    tools=[{"type": "code_interpreter"}],
    model="gpt-4"
)
```


### Updating an Assistant's Name

```python
assistant_id_to_update = "assistant_id_here"
await manager.update_assistant(assistant_id_to_update, name="New Assistant Name")
```


### Listing Assistants

```python
unique_assistants = await manager.list_assistants()
for name, id in unique_assistants.items():
    print(f"Name: {name}, ID: {id}")
```